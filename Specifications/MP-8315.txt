Budget vs Actual 7.0.0+ (MP-10159) [MP-8315] Add Remaining Expense Types to Budget Vs Actual. Created: 07/Nov/23  Updated: 10/Feb/25 Status:Ready For DevProject:Mojo ProjectComponents:Mojo (Dashboard) Affects versions:None Fix versions:To be Confirmed, 7.0.0 Parent:Budget vs Actual 7.0.0+Type: Story Priority: Normal Reporter: Weverson Santos Assignee: Unassigned Resolution: Unresolved Votes: 0 Labels: None Remaining Estimate:Not Specified Time Spent:Not Specified Original estimate:Not Specified Issue links: Blocksis blocked by MP-8147 Add Enable/Disable Option to the Budg... Done ParentChildIs a Child Of MP-8258 Add Expense Types to Budget Vs Actual... Candidate Application:Mojo-Platform Epic Link:Budget vs Actual 7.0.0+ Sprint:Test Notes:See acceptance criteria.Development Approach:For reference, the invoice-upload-widget-admin-handler.ts is a good example of the general implementation of what is detailed below. The default values that will be from the start are:* Direct from Debtor - Off* Direct Via Debtor - Off* Non-Recoverable - Off* S/C Recoverable - OnFrontendOn BudgetVsActualWidgetAdminHandler :* On its getAdminForm method: o You can call methods that will add the desired extra fields to this FormDefinition. Reusable fields are stored on widget-admin-form.ts. * In this case, you could use the already existing multiSelect field that has a label (It could be something like “Expense Types Visibility“) and a multiselect dropdown that would have all four options available for selection. * This could be done as a non reusable manual field addition inside of the getAdminForm itself (Something like): * formDefinition.fields.push(*     {*       key: 'expenseTypesVisibility',*       label: 'Expense Types Visibility',*       value: selectedExpenseTypesVisibilityItems,*       type: 'multiSelect',*       dataKey: 'Value',*       optionLabel: 'DisplayName',*       options: expenseTypesVisibilityItems*     } as FormFieldDefinition*   );* Since you are creating a custom field, we need to create persistence for it too. o A custom save functionality will have to be called to save the custom field to the database and implemented in the createCopyFromAdminForm and saveConfigFromAdminForm methods.o A service will have to be created and called in the initialise method that will get any existing value for the selected config (Look for an existing service that retrieves configuration for this widget and use that if already exists).* You will also need to get the data from the set configuration to use on the widget. To do that you will have to: o In the getTreeNodeData const of budget-vs-actual.selectors.ts , call the new selector that will get the config saved on the database and apply the config to its logic.o In the budget-vs-actual-config.reducers.ts add the needed states.o In the budget-vs-actual-config.actions.ts add the needed actions.o In the budget-vs-actual-config.effects.ts add the needed effects.Backend* Since you are creating a custom field, we need to create persistence for it too. o In the API endpoint in the BudgetVsActualController handle the saving for this field.o In the API endpoint in the BudgetVsActualController get the field existing value.Database* Since you are creating a custom field, we need to create persistence for it too. o The table BudgetVsActualWidgetConfiguration already exists.o You will need to create a new table called BudgetVsActualWidgetExpenseTypes that will be linked to BudgetVsActualWidgetConfiguration by the WidgetConfigurationId. * It should have the following columns: * Id (int)* WidgetConfigurationId (int)* SelectedValue (varchar)* Each item selected will be recorded there and it will be retrieved based on a many-to-one relationship with WidgetConfigurationId.Flagged:Impediment Acceptance Criteria:Expense Types are available as a multiselect in the Widget ConfigurationGIVEN - a Mojo user is opening Widget configuration for the Budget Vs Actual widgetWHEN - they open the configurationTHEN - among the options is a Multi Select Displaying the Expense Types:* S/C Recoverable* Non-Recoverable* Direct From Debtor* Direct Via ScheduleAs a default, only S/C Recoverable is selectedGIVEN - a Mojo user is opening Widget configuration for the Budget Vs Actual widgetWHEN - they open the configuration for the first timeTHEN - the default will be to have only ‘S/C Recoverable’ selected.If more than one Expense Type is selected, they display as a top level of HierarchyGIVEN - a Mojo user is opening Widget configuration for the Budget Vs Actual widgetWHEN - they select more than one Expense type in the dropdownTHEN - these present as an extra level of hierarchy in the table, above SchedulesExpense Type Order Within the WidgetGIVEN - A Mojo user is using the budget vs actual widgetWHEN - they have all Expense Types configured to displayTHEN - They will show as the top level of hierarchy (above schedules) in the following order:* Direct from Debtor* Direct Via Debtor* Non-Recoverable* S/C RecoverableIn line with PMA functionality.Refined By:Shiny, Sparkle Lead - SIT:Colin Harrop Lead - Dev:Paul Aylett  Description   As a budget vs actual widget user, I want to be able to enable/disable the following Expense Types:* S/C Recoverable* Non-Recoverable* Income* Direct From Debtor* Direct Via ScheduleOn the budget vs actual widget configuration, so that I can customize the widget UX.As a Property Manager, I want to easily be able to configure different Expense Types in Budget Vs Actual Widget, so that I can have a bespoke experience.PMA currently allows the following expense types to be viewed in BvA reports:* Direct From Debtor* Direct Via Schedule* Income* Non-Recoverable* S/C Recoverable.Mojo pulls all of these from the database in the back end, but only displays S/C recoverable for the first iteration of this widget. If they are to be represented, the question is how best to do so in a clear and useful way that matches usage cases. Add/ Select in configurationIn Widget Configuration, Add a multiselect dropdown listing:* S/C Recoverable* Non-Recoverable* Direct From Debtor* Direct Via ScheduleThe default will be to only have S/C Recoverable selected.If another item, such as Non-Recoverables, is selected on its own, then the widget will display only the data from that budget type.If more than one item is selected, then they will present in the widget as an additional layer of hierarchy above schedules. Comments   Comment by Morgan Nash [ 12/Jan/24 ] Awaiting a small rethinkGenerated at Tue Feb 11 15:23:13 GMT 2025 by Daniel Trusler using Jira 1001.0.0-SNAPSHOT#100279-rev:0c5ec5823d59314d29237bdb14c48883af10ba24. 